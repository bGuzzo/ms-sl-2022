# Thalassemia (blood disorder) histogram
ggplot(data=DataSetForGraph,aes(x=thalassemia,fill=sex))+geom_bar()
# ECG result histogram
ggplot(data=DataSetForGraph,aes(x=ecg_result,fill=sex))+geom_bar()
# Number of free major heart vessels histogram
ggplot(data=DataSetForGraph,aes(x=number_of_vessel,fill=sex))+geom_bar()
################# Grafici per regressori continui #################
# Regression plot for cholesterol and blood pressure
plot_chol_bp=ggplot(data=DataSetForGraph,aes(x=cholestrol,y=blood_pressure,col=sex))+geom_point()+geom_smooth(method="lm",se=FALSE)
ggarrange(plot_chol_bp,ncol=1,nrow=1)
# Regression plot for cholesterol and max heart rate achieved
plot_chol_mhr=ggplot(data=DataSetForGraph,aes(x=cholestrol,y=max_heart_rate_achieved,col=sex))+geom_point()+geom_smooth(method="lm",se=FALSE)
ggarrange(plot_chol_mhr,ncol=1,nrow=1)
# Regression plot for cholesterol and age
plot_chol_age=ggplot(data=DataSetForGraph,aes(x=cholestrol,y=age,col=sex))+geom_point()+geom_smooth(method="lm",se=FALSE)
ggarrange(plot_chol_age,ncol=1,nrow=1)
# Density plot of blood pressure
ggplot(DataSetForGraph, aes(x=blood_pressure,fill=sex)) + geom_density() + ggtitle("Blood Pressure") + theme(plot.title = element_text(hjust = 0.5))
# Density plot of cholesterol
ggplot(DataSetForGraph, aes(x=cholestrol,fill=sex)) + geom_density() + ggtitle("Cholesterol Level") + theme(plot.title = element_text(hjust = 0.5))
################# Verifica della presenza di multicollinearità #################
# Possiamo osservare che vi è presenza di media multiccolinearità dal momento che vi sono coppie di regressori
# Che presentano una correlazione positiva/negativa.
# A tal proposito è necessario utilizzare delle tecniche di regolarizzazione.
DataSet.cor = cor(DataSet)
corrplot(DataSet.cor)
DataSet.cor
n<-nrow(DataSet)
################# Applicazione delle tecniche di regolarizzazione con corss-validation #################
# discretizzazione di lambda in una sequenza decrescente di valori
qq<-seq(4, -4, length =150)
griglia =10^qq
# divisione tra matrice dei regressori e vettore variabile dipendente
n<-nrow(DataSet)
names(DataSet)
xx<-DataSet[,-14]
x<-as.matrix(xx)
dim(x)
names(x)
y<-DataSet$output
################# Descrizione DataSet #################
# age: The person’s age in years
# sex: The person’s sex (1 = male, 0 = female)
# cp: chest pain type
#	  - Value 0: asymptomatic
#	  - Value 1: atypical angina
#	  - Value 2: non-anginal pain
#	  - Value 3: typical angina
# trestbps: The person’s resting blood pressure (mm Hg on admission to the hospital)
# chol: The person’s cholesterol measurement in mg/dl
# fbs: The person’s fasting blood sugar (> 120 mg/dl, 1 = true; 0 = false)
# restecg: resting electrocardiographic results
#	  - Value 0: showing probable or definite left ventricular hypertrophy by Estes’ criteria
#	  - Value 1: normal
#	  - Value 2: having ST-T wave abnormality (T wave inversions and/or ST elevation or depression of > 0.05 mV)
# thalach: The person’s maximum heart rate achieved
# exang: Exercise induced angina (1 = yes; 0 = no)
# oldpeak: ST depression induced by exercise relative to rest (‘ST’ relates to positions on the ECG plot. See more here)
# slope: the slope of the peak exercise ST segment
#   - Value 0: downsloping
#   - Value 1: flat
#   - Value 2: upsloping
# caa: The number of major vessels
#   - Value 0: No free hearth vessels
#   - Value 1: One free hearth vessel
#   - Value 2: Two free hearth vessels
#   - Value 3: Three free hearth vessels
#   - Value 4: All free hearth vessels
# thal: A blood disorder called Thalassemia
#   - Value 0: NULL (dropped from the dataset previously)
#	  - Value 1: fixed defect (no blood flow in some part of the heart)
#	  - Value 2: normal blood flow
#	  - Value 3: reversible defect (a blood flow is observed but it is not normal)
# target: Heart disease (1 = no, 0= yes)
################# Script #################
library(dplyr)
library(GGally)
library(Hmisc)
library(corrplot)
library(glmnet)
library(ggplot2)
library(ggpubr)
library(betareg)
# Set del seme per evitare risultati diversi in run successivi
set.seed(100)
# https://DataSetw.kaggle.com/datasets/rashikrahmanpritom/heart-attack-analysis-prediction-data set
#path<-paste(getwd(),"/Documenti/GitHub/ms-sl-2022/","dataset/heart.csv",sep = "",collapse=NULL)
path<-paste(getwd(),"/dataset/heart.csv",sep = "",collapse=NULL)
DataSet<-read.csv(file=path, sep=",", header=TRUE)
dim(DataSet)
describe(DataSet)
head(DataSet)
# Confermiamo che non ci sono valori mancanti
sum(is.na(DataSet))
################# Visualizzazione Outliers #################
# Osserviamo la presenza di outlier nei valori del colesterolo, nello specifico
# un valore oltre 500.
boxplot(DataSet$chol, main = "cholesterol")
# Osserviamo la presenza di outlier nei valori della pressione saguigna, nello specifico
# si rileva la presenza valori oltre 170.
boxplot(DataSet$trtbps, main = "blood pressure")
# Osserviamo la presenza di un singolo outlier nei valori massimi del battito cardiaco,
# in particolare un valore minore di 80.
boxplot(DataSet$thalachh,  main = "maximum heart rate achieved")
# Non si rileva la presenza di outlier nei valori dell'età
boxplot(DataSet$age,  main = "age")
################# Rename dei dati #################
DataSetForGraph=DataSet%>%rename(
"chest_pain"="cp",
"cholestrol"="chol",
"exercise_induced_angina"="exng",
"number_of_vessel"="caa",
"blood_pressure"="trtbps",
"fast_blood_sugar"="fbs",
"max_heart_rate_achieved"="thalachh",
"thalassemia"="thall",
"peak_exercice_slope"="slp",
"ecg_result"="restecg"
)
# Sex
DataSetForGraph=DataSetForGraph%>%mutate(sex=recode(sex,
"1"="Male",
"0"="Female"))
# Exercise induced angina
DataSetForGraph=DataSetForGraph%>%mutate(exercise_induced_angina=recode(exercise_induced_angina,
"1"="yes",
"0"="No"))
# Chest pain
DataSetForGraph=DataSetForGraph%>%mutate(chest_pain=recode(chest_pain,
"0"="asymptomatic",
"1"="atypical angina",
"2"="non-anginal pain",
"3"="typical angina"))
# Slope of the peak exercise ST segment
DataSetForGraph=DataSetForGraph%>%mutate(peak_exercice_slope=recode(peak_exercice_slope,
"0"="upsloping",
"1"="flat",
"2"="downsloping"))
# Fat blood sugar
DataSetForGraph=DataSetForGraph%>%mutate(fast_blood_sugar=recode(fast_blood_sugar,
"0"="fasting blood sugar < 120",
"1"="fasting blood sugar > 120"))
# ECG result
DataSetForGraph=DataSetForGraph%>%mutate(ecg_result=recode(ecg_result,
"0"="left ventricular hypertrophy",
"1"="normal",
"2"="ST-T wave abnormality"))
# Thalassemia (blood disorder)
DataSetForGraph=DataSetForGraph%>%mutate(thalassemia=recode(thalassemia,
"1"="fixed defect",
"2"="normal blood flow",
"3"="reversable defect"))
# Number of free major heart vessels
DataSetForGraph=DataSetForGraph%>%mutate(number_of_vessel=recode(number_of_vessel,
"0"="no free heart vessels",
"1"="one free heart vessel",
"2"="two free heart vessels",
"3"="three free heart vessels",
"4"="all free heart vessels"))
################# Istogrammi #################
# Sex histogram
ggplot(data=DataSetForGraph,aes(x=sex,fill=sex))+geom_bar()
# Age histogram
ggplot(data=DataSetForGraph,aes(x=age,fill=sex))+geom_histogram(col="black")
# Chest pain histogram
ggplot(data=DataSetForGraph,aes(x=chest_pain,fill=sex))+geom_bar()+theme(axis.text=element_text(size = 8))
# Slope of the peak exercise ST segment histogram
ggplot(data=DataSetForGraph,aes(x=peak_exercice_slope,fill=sex))+geom_bar()
# Exercise induced angina histogram
ggplot(data=DataSetForGraph,aes(x=exercise_induced_angina,fill=sex))+geom_bar()
# Fast blood sugar histogram
ggplot(data=DataSetForGraph,aes(x=fast_blood_sugar,fill=sex))+geom_bar()
# Thalassemia (blood disorder) histogram
ggplot(data=DataSetForGraph,aes(x=thalassemia,fill=sex))+geom_bar()
# ECG result histogram
ggplot(data=DataSetForGraph,aes(x=ecg_result,fill=sex))+geom_bar()
# Number of free major heart vessels histogram
ggplot(data=DataSetForGraph,aes(x=number_of_vessel,fill=sex))+geom_bar()
################# Grafici per regressori continui #################
# Regression plot for cholesterol and blood pressure
plot_chol_bp=ggplot(data=DataSetForGraph,aes(x=cholestrol,y=blood_pressure,col=sex))+geom_point()+geom_smooth(method="lm",se=FALSE)
ggarrange(plot_chol_bp,ncol=1,nrow=1)
# Regression plot for cholesterol and max heart rate achieved
plot_chol_mhr=ggplot(data=DataSetForGraph,aes(x=cholestrol,y=max_heart_rate_achieved,col=sex))+geom_point()+geom_smooth(method="lm",se=FALSE)
ggarrange(plot_chol_mhr,ncol=1,nrow=1)
# Regression plot for cholesterol and age
plot_chol_age=ggplot(data=DataSetForGraph,aes(x=cholestrol,y=age,col=sex))+geom_point()+geom_smooth(method="lm",se=FALSE)
ggarrange(plot_chol_age,ncol=1,nrow=1)
# Density plot of blood pressure
ggplot(DataSetForGraph, aes(x=blood_pressure,fill=sex)) + geom_density() + ggtitle("Blood Pressure") + theme(plot.title = element_text(hjust = 0.5))
# Density plot of cholesterol
ggplot(DataSetForGraph, aes(x=cholestrol,fill=sex)) + geom_density() + ggtitle("Cholesterol Level") + theme(plot.title = element_text(hjust = 0.5))
################# Verifica della presenza di multicollinearità #################
# Possiamo osservare che vi è presenza di media multiccolinearità dal momento che vi sono coppie di regressori
# Che presentano una correlazione positiva/negativa.
# A tal proposito è necessario utilizzare delle tecniche di regolarizzazione.
DataSet.cor = cor(DataSet)
corrplot(DataSet.cor)
DataSet.cor
n<-nrow(DataSet)
################# Applicazione delle tecniche di regolarizzazione con corss-validation #################
# discretizzazione di lambda in una sequenza decrescente di valori
qq<-seq(4, -4, length =150)
griglia =10^qq
# divisione tra matrice dei regressori e vettore variabile dipendente
n<-nrow(DataSet)
names(DataSet)
xx<-DataSet[,-14]
x<-as.matrix(xx)
dim(x)
names(x)
y<-DataSet$output
head(x)
head(y)
################# Descrizione DataSet #################
# age: The person’s age in years
# sex: The person’s sex (1 = male, 0 = female)
# cp: chest pain type
#	  - Value 0: asymptomatic
#	  - Value 1: atypical angina
#	  - Value 2: non-anginal pain
#	  - Value 3: typical angina
# trestbps: The person’s resting blood pressure (mm Hg on admission to the hospital)
# chol: The person’s cholesterol measurement in mg/dl
# fbs: The person’s fasting blood sugar (> 120 mg/dl, 1 = true; 0 = false)
# restecg: resting electrocardiographic results
#	  - Value 0: showing probable or definite left ventricular hypertrophy by Estes’ criteria
#	  - Value 1: normal
#	  - Value 2: having ST-T wave abnormality (T wave inversions and/or ST elevation or depression of > 0.05 mV)
# thalach: The person’s maximum heart rate achieved
# exang: Exercise induced angina (1 = yes; 0 = no)
# oldpeak: ST depression induced by exercise relative to rest (‘ST’ relates to positions on the ECG plot. See more here)
# slope: the slope of the peak exercise ST segment
#   - Value 0: downsloping
#   - Value 1: flat
#   - Value 2: upsloping
# caa: The number of major vessels
#   - Value 0: No free hearth vessels
#   - Value 1: One free hearth vessel
#   - Value 2: Two free hearth vessels
#   - Value 3: Three free hearth vessels
#   - Value 4: All free hearth vessels
# thal: A blood disorder called Thalassemia
#   - Value 0: NULL (dropped from the dataset previously)
#	  - Value 1: fixed defect (no blood flow in some part of the heart)
#	  - Value 2: normal blood flow
#	  - Value 3: reversible defect (a blood flow is observed but it is not normal)
# target: Heart disease (1 = no, 0= yes)
################# Script #################
library(dplyr)
library(GGally)
library(Hmisc)
library(corrplot)
library(glmnet)
library(ggplot2)
library(ggpubr)
library(betareg)
# Set del seme per evitare risultati diversi in run successivi
set.seed(100)
# https://DataSetw.kaggle.com/datasets/rashikrahmanpritom/heart-attack-analysis-prediction-data set
#path<-paste(getwd(),"/Documenti/GitHub/ms-sl-2022/","dataset/heart.csv",sep = "",collapse=NULL)
path<-paste(getwd(),"/dataset/heart.csv",sep = "",collapse=NULL)
DataSet<-read.csv(file=path, sep=",", header=TRUE)
dim(DataSet)
describe(DataSet)
head(DataSet)
# Confermiamo che non ci sono valori mancanti
sum(is.na(DataSet))
################# Visualizzazione Outliers #################
# Osserviamo la presenza di outlier nei valori del colesterolo, nello specifico
# un valore oltre 500.
boxplot(DataSet$chol, main = "cholesterol")
# Osserviamo la presenza di outlier nei valori della pressione saguigna, nello specifico
# si rileva la presenza valori oltre 170.
boxplot(DataSet$trtbps, main = "blood pressure")
# Osserviamo la presenza di un singolo outlier nei valori massimi del battito cardiaco,
# in particolare un valore minore di 80.
boxplot(DataSet$thalachh,  main = "maximum heart rate achieved")
# Non si rileva la presenza di outlier nei valori dell'età
boxplot(DataSet$age,  main = "age")
################# Rename dei dati #################
DataSetForGraph=DataSet%>%rename(
"chest_pain"="cp",
"cholestrol"="chol",
"exercise_induced_angina"="exng",
"number_of_vessel"="caa",
"blood_pressure"="trtbps",
"fast_blood_sugar"="fbs",
"max_heart_rate_achieved"="thalachh",
"thalassemia"="thall",
"peak_exercice_slope"="slp",
"ecg_result"="restecg"
)
# Sex
DataSetForGraph=DataSetForGraph%>%mutate(sex=recode(sex,
"1"="Male",
"0"="Female"))
# Exercise induced angina
DataSetForGraph=DataSetForGraph%>%mutate(exercise_induced_angina=recode(exercise_induced_angina,
"1"="yes",
"0"="No"))
# Chest pain
DataSetForGraph=DataSetForGraph%>%mutate(chest_pain=recode(chest_pain,
"0"="asymptomatic",
"1"="atypical angina",
"2"="non-anginal pain",
"3"="typical angina"))
# Slope of the peak exercise ST segment
DataSetForGraph=DataSetForGraph%>%mutate(peak_exercice_slope=recode(peak_exercice_slope,
"0"="upsloping",
"1"="flat",
"2"="downsloping"))
# Fat blood sugar
DataSetForGraph=DataSetForGraph%>%mutate(fast_blood_sugar=recode(fast_blood_sugar,
"0"="fasting blood sugar < 120",
"1"="fasting blood sugar > 120"))
# ECG result
DataSetForGraph=DataSetForGraph%>%mutate(ecg_result=recode(ecg_result,
"0"="left ventricular hypertrophy",
"1"="normal",
"2"="ST-T wave abnormality"))
# Thalassemia (blood disorder)
DataSetForGraph=DataSetForGraph%>%mutate(thalassemia=recode(thalassemia,
"1"="fixed defect",
"2"="normal blood flow",
"3"="reversable defect"))
# Number of free major heart vessels
DataSetForGraph=DataSetForGraph%>%mutate(number_of_vessel=recode(number_of_vessel,
"0"="no free heart vessels",
"1"="one free heart vessel",
"2"="two free heart vessels",
"3"="three free heart vessels",
"4"="all free heart vessels"))
################# Istogrammi #################
# Sex histogram
ggplot(data=DataSetForGraph,aes(x=sex,fill=sex))+geom_bar()
# Age histogram
ggplot(data=DataSetForGraph,aes(x=age,fill=sex))+geom_histogram(col="black")
# Chest pain histogram
ggplot(data=DataSetForGraph,aes(x=chest_pain,fill=sex))+geom_bar()+theme(axis.text=element_text(size = 8))
# Slope of the peak exercise ST segment histogram
ggplot(data=DataSetForGraph,aes(x=peak_exercice_slope,fill=sex))+geom_bar()
# Exercise induced angina histogram
ggplot(data=DataSetForGraph,aes(x=exercise_induced_angina,fill=sex))+geom_bar()
# Fast blood sugar histogram
ggplot(data=DataSetForGraph,aes(x=fast_blood_sugar,fill=sex))+geom_bar()
# Thalassemia (blood disorder) histogram
ggplot(data=DataSetForGraph,aes(x=thalassemia,fill=sex))+geom_bar()
# ECG result histogram
ggplot(data=DataSetForGraph,aes(x=ecg_result,fill=sex))+geom_bar()
# Number of free major heart vessels histogram
ggplot(data=DataSetForGraph,aes(x=number_of_vessel,fill=sex))+geom_bar()
################# Grafici per regressori continui #################
# Regression plot for cholesterol and blood pressure
plot_chol_bp=ggplot(data=DataSetForGraph,aes(x=cholestrol,y=blood_pressure,col=sex))+geom_point()+geom_smooth(method="lm",se=FALSE)
ggarrange(plot_chol_bp,ncol=1,nrow=1)
# Regression plot for cholesterol and max heart rate achieved
plot_chol_mhr=ggplot(data=DataSetForGraph,aes(x=cholestrol,y=max_heart_rate_achieved,col=sex))+geom_point()+geom_smooth(method="lm",se=FALSE)
ggarrange(plot_chol_mhr,ncol=1,nrow=1)
# Regression plot for cholesterol and age
plot_chol_age=ggplot(data=DataSetForGraph,aes(x=cholestrol,y=age,col=sex))+geom_point()+geom_smooth(method="lm",se=FALSE)
ggarrange(plot_chol_age,ncol=1,nrow=1)
# Density plot of blood pressure
ggplot(DataSetForGraph, aes(x=blood_pressure,fill=sex)) + geom_density() + ggtitle("Blood Pressure") + theme(plot.title = element_text(hjust = 0.5))
# Density plot of cholesterol
ggplot(DataSetForGraph, aes(x=cholestrol,fill=sex)) + geom_density() + ggtitle("Cholesterol Level") + theme(plot.title = element_text(hjust = 0.5))
################# Verifica della presenza di multicollinearità #################
# Possiamo osservare che vi è presenza di media multiccolinearità dal momento che vi sono coppie di regressori
# Che presentano una correlazione positiva/negativa.
# A tal proposito è necessario utilizzare delle tecniche di regolarizzazione.
DataSet.cor = cor(DataSet)
corrplot(DataSet.cor)
DataSet.cor
n<-nrow(DataSet)
################# Applicazione delle tecniche di regolarizzazione con corss-validation #################
# discretizzazione di lambda in una sequenza decrescente di valori
qq<-seq(4, -4, length =150)
griglia =10^qq
# divisione tra matrice dei regressori e vettore variabile dipendente
n<-nrow(DataSet)
names(DataSet)
xx<-DataSet[,-14]
x<-as.matrix(xx)
dim(x)
names(x)
y<-DataSet$output
################# Ridge regression #################
# Di default glmnet() standardizza i regressori
ridgeAllLambda = glmnet (x,y,alpha=0, lambda=griglia)
coef(ridgeAllLambda)
# Grafico andamento dei regressori rispetto al lambda
plot(ridgeAllLambda, main="Ridge Regression con regressori standardizzati",xvar="lambda", label=TRUE)
# Applichiamo la K-Fold cross-validation con K=10 (default)
ridgeKfold10=cv.glmnet(x,y,lambda=griglia,alpha=0)
plot(ridgeKfold10, main="RIDGE: k-fold CV K = 10")
# Estraiamo il lambda minimo a cui corrisponde la minore media deli MSE calcolati sul test-set
ridgeBestLambda <- ridgeKfold10$lambda.min
ridgeBestLambda # = 0.08974704
# Utilizziamo il lambda migliore per stimare il modello finale
ridgeModBestLambda=glmnet(x,y,alpha=0,lambda=ridgeBestLambda)
coef(ridgeModBestLambda)[,1]
head(ridgeModBestLambda)
scaled_regressors = scale(x)
head(scaled_regressors)
head(x)
drops = c('sex','cp','fbs','restcg','exng','slp','caa','thall')
x_toscale =  x[ , !(names(x) %in% drops)]
head(x_toscale)
drops = c('sex','cp','fbs','restcg','exng','slp','caa','thall')
x_toscale =  x[ , !(names(x) %in% drops)]
head(x_toscale)
x_toscale =  x[!(names(x) %in% drops)]
head(x_toscale)
drops <- c('sex','cp','fbs','restcg','exng','slp','caa','thall')
x_toscale <- x[, drops]
drops <- c('sex','cp','fbs','restcg','exng','slp','caa','thall')
x_toscale <-  x[ ,!(names(x) %in% drops)]
head(x_toscale)
drops <- c('sex','cp','fbs','restcg','exng','slp','caa','thall')
x_toscale <-  x[ ,drops]
x_toscale <-  select(x, 'age','trtbps','chol','thalachh','oldpeak')
head(x)
x_toscale <-  select(x, 'age','trtbps','chol','thalachh','oldpeak')
x_toscale <-  select(x, age,trtbps,chol,thalachh,oldpeak)
x_toscale <-  select(x, c('age,trtbps','chol','thalachh','oldpeak'))
x_toscale <-  select(x, c('age,trtbps'),c('chol'),c('thalachh'),c('oldpeak'))
x_toscale <-  select(x,"age","trtbps","chol","thalachh","oldpeak")
df <- x[, -which(names(x) == c("age","trtbps","chol","thalachh","oldpeak"))]
x_toscale <- x[, -which(names(x) == c("age","trtbps","chol","thalachh","oldpeak"))]
head(x_toscale)
x_toscale <- x[, c("age","trtbps","chol","thalachh","oldpeak")]
head(x_toscale)
scaled_regressors = scale(x_toscale)
head(scaled_regressors)
cleaned_regressors = cbind(scaled_regressors, c("sex","cp","fbs","restecg","exng","slp","caa","thall"))
dropped <- x[, c("sex","cp","fbs","restecg","exng","slp","caa","thall")]
cleaned_regressors = cbind(scaled_regressors, dropped)
cleaned_regressors = cbind(scaled_regressors, dropped, label=y)
head(cleaned_regressors)
index = sample(1:nrow(cleaned_regressors), 0.7*nrow(cleaned_regressors))
training_set = cleaned_regressors[index,]
test_set = cleaned_regressors[-index,]
head(training_set)
head(test_set)
dim(training_set)
dim(test_set)
dim(x)
y_test = cleaned_regressors['label']
head(y_test)
y_test = cleaned_regressors["label"]
head(y_test)
y_test = test_set$label
y_test = test_set[, "label"]
head(y_test)
dim(y_test)
describe(y_test)
index = sample(1:nrow(cleaned_regressors), 0.7*nrow(cleaned_regressors))
training_set = cleaned_regressors[index,]
y_training = training_set[, "label"]
test_set = cleaned_regressors[-index,]
y_test = test_set[, "label"]
scaled_regressors <- scale(x_toscale)
head(scaled_regressors)
cleaned_regressors <- cbind(scaled_regressors, dropped, label=y)
head(cleaned_regressors)
index <- sample(1:nrow(cleaned_regressors), 0.7*nrow(cleaned_regressors))
training_set <- cleaned_regressors[index,]
y_training <- training_set[, "label"]
test_set <- cleaned_regressors[-index,]
y_test <- test_set[, "label"]
head(test_set)
test_set <- test_set[, -which(names(test_set) == "label")]
head(test_set)
head(test_set)
test_set <- test_set[, -which(names(test_set) != "label")]
head(test_set)
test_set <- select(test_set, -label)
test_set <- select(test_set, -"label")
test_set <- test_set[, -15]
head(test_set)
test_set <- test_set[, -0]
head(test_set)
test_set <- test_set[, -1]
head(test_set)
test_set <- test_set[, -14]
head(test_set)
test_set <- test_set[, names(test_set)]
head(test_set)
index <- sample(1:nrow(cleaned_regressors), 0.7*nrow(cleaned_regressors))
training_set <- cleaned_regressors[index,]
y_training <- training_set[, "label"]
test_set <- cleaned_regressors[-index,]
y_test <- test_set[, "label"]
head(test_set)
test_set <- test_set[, names(test_set)]
head(test_set)
index <- sample(1:nrow(cleaned_regressors), 0.7*nrow(cleaned_regressors))
training_set <- cleaned_regressors[index,]
y_training <- training_set[, "label"]
test_set <- cleaned_regressors[-index,]
y_test <- test_set[, "label"]
test_set <- test_set[, -15]
head(test_set)
test_set <- test_set[, -14]
head(test_set)
index <- sample(1:nrow(cleaned_regressors), 0.7*nrow(cleaned_regressors))
training_set <- cleaned_regressors[index,]
y_training <- training_set[, "label"]
test_set <- cleaned_regressors[-index,]
y_test <- test_set[, "label"]
test_set <- test_set[, -14]
head(test_set)
